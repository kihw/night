#Requires -Version 5.1

<#
.SYNOPSIS
    Script d'installation pour NightMod sur Windows
.DESCRIPTION
    Ce script installe automatiquement NightMod et ses d√©pendances sur Windows.
    Il v√©rifie les pr√©requis, installe Node.js si n√©cessaire, et build l'application.
.PARAMETER SkipNodeInstall
    Ignore l'installation automatique de Node.js
.PARAMETER BuildOnly
    Effectue uniquement le build sans v√©rifier les d√©pendances
.PARAMETER Verbose
    Affiche des informations d√©taill√©es pendant l'installation
.EXAMPLE
    .\install.ps1
    Installation compl√®te avec v√©rification automatique
.EXAMPLE
    .\install.ps1 -SkipNodeInstall
    Installation en ignorant l'installation de Node.js
#>

[CmdletBinding()]
param(
    [switch]$SkipNodeInstall,
    [switch]$BuildOnly,
    [switch]$Verbose
)

# Configuration
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Couleurs pour l'affichage
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    
    $colorMap = @{
        "Red" = [ConsoleColor]::Red
        "Green" = [ConsoleColor]::Green
        "Yellow" = [ConsoleColor]::Yellow
        "Blue" = [ConsoleColor]::Blue
        "Cyan" = [ConsoleColor]::Cyan
        "Magenta" = [ConsoleColor]::Magenta
        "White" = [ConsoleColor]::White
    }
    
    Write-Host $Message -ForegroundColor $colorMap[$Color]
}

function Write-Step {
    param([string]$Message)
    Write-ColorOutput "üîÑ $Message" "Cyan"
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è  $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è  $Message" "Blue"
}

# Fonction pour v√©rifier si un programme est install√©
function Test-ProgramInstalled {
    param([string]$ProgramName)
    
    try {
        $null = Get-Command $ProgramName -ErrorAction Stop
        return $true
    }
    catch {
        return $false
    }
}

# Fonction pour installer Node.js via Chocolatey
function Install-NodeJS {
    Write-Step "Installation de Node.js..."
    
    # V√©rifier si Chocolatey est install√©
    if (Test-ProgramInstalled "choco") {
        Write-Info "Installation de Node.js via Chocolatey..."
        try {
            choco install nodejs -y
            Write-Success "Node.js install√© via Chocolatey"
            return $true
        }
        catch {
            Write-Warning "√âchec de l'installation via Chocolatey: $($_.Exception.Message)"
        }
    }
    
    # V√©rifier si Scoop est install√©
    if (Test-ProgramInstalled "scoop") {
        Write-Info "Installation de Node.js via Scoop..."
        try {
            scoop install nodejs
            Write-Success "Node.js install√© via Scoop"
            return $true
        }
        catch {
            Write-Warning "√âchec de l'installation via Scoop: $($_.Exception.Message)"
        }
    }
    
    # Installation manuelle
    Write-Info "T√©l√©chargement de Node.js depuis le site officiel..."
    try {
        $nodeVersion = "18.19.0"
        $architecture = if ([Environment]::Is64BitOperatingSystem) { "x64" } else { "x86" }
        $downloadUrl = "https://nodejs.org/dist/v$nodeVersion/node-v$nodeVersion-$architecture.msi"
        $tempFile = "$env:TEMP\nodejs-installer.msi"
        
        Write-Info "T√©l√©chargement depuis: $downloadUrl"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $tempFile -UseBasicParsing
        
        Write-Info "Installation de Node.js..."
        Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", $tempFile, "/quiet", "/norestart" -Wait
        
        # Nettoyer le fichier temporaire
        Remove-Item $tempFile -Force -ErrorAction SilentlyContinue
        
        # Actualiser les variables d'environnement
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
        
        Write-Success "Node.js install√© manuellement"
        return $true
    }
    catch {
        Write-Error "√âchec de l'installation manuelle: $($_.Exception.Message)"
        return $false
    }
}

# Fonction principale
function Main {
    Write-ColorOutput @"
üåô ================================
   Installation de NightMod
   Protection nocturne pour Windows
================================
"@ "Magenta"

    try {
        # V√©rifier les permissions
        $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
        $isAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        
        if (-not $isAdmin) {
            Write-Warning "Ce script n'est pas ex√©cut√© en tant qu'administrateur."
            Write-Info "Certaines fonctionnalit√©s peuvent n√©cessiter des privil√®ges √©lev√©s."
        }

        # V√©rifier si on est dans le bon r√©pertoire
        if (-not (Test-Path "package.json")) {
            Write-Error "Le fichier package.json n'a pas √©t√© trouv√©."
            Write-Info "Assurez-vous d'ex√©cuter ce script depuis le r√©pertoire racine de NightMod."
            exit 1
        }

        # √âtape 1: V√©rifier Node.js
        if (-not $BuildOnly) {
            Write-Step "V√©rification de Node.js..."
            
            if (Test-ProgramInstalled "node") {
                $nodeVersion = node --version
                Write-Success "Node.js d√©tect√©: $nodeVersion"
                
                if (Test-ProgramInstalled "npm") {
                    $npmVersion = npm --version
                    Write-Success "npm d√©tect√©: v$npmVersion"
                }
                else {
                    Write-Error "npm n'est pas disponible"
                    exit 1
                }
            }
            elseif (-not $SkipNodeInstall) {
                Write-Warning "Node.js n'est pas install√©"
                $install = Read-Host "Voulez-vous installer Node.js automatiquement? (O/n)"
                
                if ($install -eq "" -or $install -eq "O" -or $install -eq "o" -or $install -eq "Y" -or $install -eq "y") {
                    if (-not (Install-NodeJS)) {
                        Write-Error "Impossible d'installer Node.js automatiquement"
                        Write-Info "Veuillez installer Node.js manuellement depuis https://nodejs.org"
                        exit 1
                    }
                    
                    # V√©rifier l'installation
                    if (-not (Test-ProgramInstalled "node")) {
                        Write-Error "Node.js n'a pas √©t√© install√© correctement"
                        Write-Info "Red√©marrez PowerShell et r√©essayez"
                        exit 1
                    }
                }
                else {
                    Write-Info "Installation annul√©e. Installez Node.js manuellement et relancez ce script."
                    exit 0
                }
            }
            else {
                Write-Error "Node.js requis mais installation ignor√©e (--SkipNodeInstall)"
                exit 1
            }
        }

        # √âtape 2: V√©rifier les outils de build Windows
        Write-Step "V√©rification des outils de build..."
        
        # V√©rifier Visual Studio Build Tools ou Visual Studio
        $hasBuildTools = $false
        
        # Chercher Visual Studio Build Tools
        $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (Test-Path $vswhere) {
            $vsInstances = & $vswhere -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -format json | ConvertFrom-Json
            if ($vsInstances.Count -gt 0) {
                $hasBuildTools = $true
                Write-Success "Visual Studio Build Tools d√©tect√©s"
            }
        }
        
        if (-not $hasBuildTools) {
            Write-Warning "Visual Studio Build Tools non d√©tect√©s"
            Write-Info "Certains modules natifs pourraient ne pas se compiler correctement"
            Write-Info "Vous pouvez installer les Build Tools depuis:"
            Write-Info "https://visualstudio.microsoft.com/visual-cpp-build-tools/"
        }

        # √âtape 3: Installation des d√©pendances
        Write-Step "Installation des d√©pendances npm..."
        
        try {
            npm install
            Write-Success "D√©pendances install√©es avec succ√®s"
        }
        catch {
            Write-Error "Erreur lors de l'installation des d√©pendances: $($_.Exception.Message)"
            Write-Info "Essayez de supprimer node_modules et package-lock.json puis relancez"
            exit 1
        }

        # √âtape 4: Build de l'application
        Write-Step "Build de l'application pour Windows..."
        
        try {
            npm run build-win
            Write-Success "Build termin√© avec succ√®s"
        }
        catch {
            Write-Error "Erreur lors du build: $($_.Exception.Message)"
            exit 1
        }

        # √âtape 5: V√©rifier les fichiers g√©n√©r√©s
        Write-Step "V√©rification des fichiers g√©n√©r√©s..."
        
        $distPath = "dist"
        if (Test-Path $distPath) {
            $files = Get-ChildItem $distPath -File
            Write-Success "Fichiers g√©n√©r√©s dans le dossier dist:"
            
            foreach ($file in $files) {
                $size = [math]::Round($file.Length / 1MB, 2)
                Write-Info "  üì¶ $($file.Name) ($size MB)"
            }
        }
        else {
            Write-Warning "Le dossier dist n'a pas √©t√© cr√©√©"
        }

        # √âtape 6: Instructions finales
        Write-ColorOutput @"

üéâ ================================
   Installation termin√©e !
================================

üöÄ Pour lancer NightMod en d√©veloppement :
   npm start

üì¶ Packages Windows disponibles dans dist\ :
   ‚Ä¢ NightMod Setup 1.0.0.exe (installateur NSIS)
   ‚Ä¢ NightMod-1.0.0-portable.exe (version portable)
   ‚Ä¢ NightMod-1.0.0-win.zip (archive ZIP)

üí° Pour installer l'application :
   Double-cliquez sur "NightMod Setup 1.0.0.exe"

üîß Commandes utiles :
   npm run dev        # Mode d√©veloppement
   npm run build-win  # Rebuild pour Windows
   npm run pack       # Empaqueter sans installer

üìö Documentation compl√®te dans BUILD.md et README.md

"@ "Green"

        Write-Success "Installation de NightMod termin√©e avec succ√®s !"
        
    }
    catch {
        Write-Error "Erreur inattendue: $($_.Exception.Message)"
        Write-Info "Stack trace: $($_.Exception.StackTrace)"
        exit 1
    }
}

# Point d'entr√©e
if ($MyInvocation.InvocationName -ne '.') {
    Main
}