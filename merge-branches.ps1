# Script PowerShell pour fusionner toutes les branches vers main
# Ex√©cuter depuis le r√©pertoire racine du projet

param(
    [switch]$Force,
    [switch]$DeleteBranches
)

Write-Host "üîÑ D√©but de la fusion des branches vers main..." -ForegroundColor Cyan

# V√©rifier si on est dans un repo Git
if (-not (Test-Path ".git")) {
    Write-Host "‚ùå Erreur: Ce r√©pertoire n'est pas un d√©p√¥t Git" -ForegroundColor Red
    Write-Host "Initialisez d'abord un d√©p√¥t avec: git init" -ForegroundColor Yellow
    exit 1
}

try {
    # Sauvegarder la branche actuelle
    $currentBranch = git branch --show-current
    Write-Host "üìç Branche actuelle: $currentBranch" -ForegroundColor Green

    # Aller sur la branche main
    Write-Host "üîÑ Basculement vers la branche main..." -ForegroundColor Cyan
    try {
        git checkout main 2>$null
    } catch {
        git checkout -b main
    }

    # R√©cup√©rer toutes les branches
    Write-Host "üìã R√©cup√©ration de toutes les branches..." -ForegroundColor Cyan
    try {
        git fetch --all 2>$null
    } catch {
        Write-Host "‚ö†Ô∏è  Pas de remote configur√©" -ForegroundColor Yellow
    }

    # Lister toutes les branches locales (sauf main)
    $branches = git branch | Where-Object { $_ -notmatch "main" -and $_ -notmatch "^\*" } | ForEach-Object { $_.Trim() }

    if (-not $branches) {
        Write-Host "‚ÑπÔ∏è  Aucune branche √† fusionner (seule main existe)" -ForegroundColor Blue
        exit 0
    }

    Write-Host "üìã Branches √† fusionner:" -ForegroundColor Cyan
    $branches | ForEach-Object { Write-Host "  - $_" -ForegroundColor White }

    # Fusionner chaque branche
    foreach ($branch in $branches) {
        Write-Host ""
        Write-Host "üîÑ Fusion de la branche: $branch" -ForegroundColor Cyan
        
        # V√©rifier si la branche existe
        $branchExists = git show-ref --verify --quiet "refs/heads/$branch"
        if ($LASTEXITCODE -eq 0) {
            # Tenter la fusion
            git merge $branch --no-ff -m "Merge branch '$branch' into main"
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Branche '$branch' fusionn√©e avec succ√®s" -ForegroundColor Green
                
                # Demander si on veut supprimer la branche
                if ($DeleteBranches) {
                    git branch -d $branch
                    Write-Host "üóëÔ∏è  Branche '$branch' supprim√©e" -ForegroundColor Yellow
                } else {
                    $response = Read-Host "üóëÔ∏è  Supprimer la branche '$branch' ? (y/N)"
                    if ($response -match "^[Yy]$") {
                        git branch -d $branch
                        Write-Host "üóëÔ∏è  Branche '$branch' supprim√©e" -ForegroundColor Yellow
                    }
                }
            } else {
                Write-Host "‚ùå Conflit lors de la fusion de '$branch'" -ForegroundColor Red
                Write-Host "üîß R√©solvez les conflits manuellement, puis continuez avec:" -ForegroundColor Yellow
                Write-Host "   git add ." -ForegroundColor White
                Write-Host "   git commit" -ForegroundColor White
                Write-Host "   Puis relancez ce script" -ForegroundColor White
                exit 1
            }
        } else {
            Write-Host "‚ö†Ô∏è  La branche '$branch' n'existe pas localement" -ForegroundColor Yellow
        }
    }

    Write-Host ""
    Write-Host "‚úÖ Toutes les branches ont √©t√© fusionn√©es vers main" -ForegroundColor Green
    Write-Host "üìä √âtat final du d√©p√¥t:" -ForegroundColor Cyan
    git log --oneline -10
    Write-Host ""
    Write-Host "üåø Branches restantes:" -ForegroundColor Cyan
    git branch

} catch {
    Write-Host "‚ùå Erreur lors de la fusion: $_" -ForegroundColor Red
    exit 1
}